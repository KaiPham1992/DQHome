//
//  ListRoomInteractor.swift
//  DQHome
//
//  Created Ngoc Duong on 10/30/18.
//  Copyright © 2018 Engma. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

/**
 1. check metadata
 2. if change or new
 3. get resource and download all room
 noted: Filename = groupId_slot Exxample : "12122121_1"
 */

// MARK: Create And Download
class ListGroupInteractor  {
    weak var presenter: ListGroupInteractorOutputProtocol?
    
    private func handleResouce(group: GroupEntity, slot: Int, resourceEntity: ResourceEntity?, completion: @escaping CompletionClosure) {
        self.createAndDownload(group: group, slot: slot, resourceEntity: resourceEntity, completion: completion)
    }
    
    func createAndDownload(group: GroupEntity, slot: Int, resourceEntity: ResourceEntity?, completion: @escaping CompletionClosure) {
        guard let _groupId = group.id else { return }
        guard let timeStamp = resourceEntity?.timeStamp, let urlStr = resourceEntity?.url else { return }
        
        ProgressView.shared.showProgress(with: AppString.Loading.downloadInfoRoom)
        
        DownloadFileHelper.downLoad(urlString: urlStr, completion: { textSVG in
            FileManagerHelper.writeFileForGroup(text: textSVG&, groupId: _groupId, slot: slot, timeStamp: timeStamp)
//            ProgressView.shared.hideProgressView()
            completion()
        }) { error in
            completion()
//            ProgressView.shared.hideProgressView()
        }
    }
}

// MARK: API
extension ListGroupInteractor: ListGroupInteractorInputProtocol {
    
    func groupSelected(group: GroupEntity) {
        if group.listRoomData.isEmpty {
            PopUpNotificationHelper.shared.showMessage(message: AppString.Message.notYetSetUpGroup)
        } else {
        }
    }
    
    // get all group
    func getTopGroup() {
        ProgressView.shared.showProgress(with: AppString.Loading.getRooms)
        Provider.shared.groupAPIService.getTopGroup(success: { groups in
            ProgressView.shared.hideProgressView()
            
            let filterGroupHaveRoom = groups.filter {$0.children.count > 0}
            self.presenter?.didGetTopGroup(groups: filterGroupHaveRoom)
            self.getInfoAllGroup(groups: filterGroupHaveRoom)
            
        }) { error in
            ProgressView.shared.hideProgressView()
        }
    }
    
    func getInfoAllGroup(groups: [GroupEntity]) {
        var childerGroup =  [GroupEntity]()
        
        groups.forEach { _group in
            childerGroup.append(contentsOf: _group.children)
        }
        
        //---
        let dispathGroup = DispatchGroup()
        childerGroup.forEach { _group in
            dispathGroup.enter()
            // get info and download if need
            getInfoOneGroup(group: _group, completion: {
                dispathGroup.leave()
            })
        }
        
        dispathGroup.notify(queue: DispatchQueue.main) {
            
            // get image from svg dowload
            childerGroup.forEach { _group in
                ProgressView.shared.showProgress(with: AppString.Loading.getRoomInfo)
                if let id = _group.id, FileManagerHelper.isExistFile(groupId: id, slot: 1)  {
                    _group.listRoomData.append(RoomData(fileName: "\(_group.id&)_1"))
                }
                
                // fix me
                DispatchQueue.main.asyncAfter(deadline: .now() + 3, execute: {
                     ProgressView.shared.hideProgressView()
                })
               
            }
            
            self.presenter?.didGetTopGroup(groups: groups)
        }
    }
    
    // Get info One Group, if change or new resour ->  download
    func getInfoOneGroup(group: GroupEntity, completion: @escaping CompletionClosure) {
        
        ProgressView.shared.showProgress(with: AppString.Loading.getRoomInfo)
        
        Provider.shared.resourceAPIService.getResourceMetadata(groupId: group.id&, success: { totalResource in
//            ProgressView.shared.hideProgressView()
            guard let _totalResouce = totalResource else { return }
            guard let groupId =  group.id else { return }
            
            // if have resource
            if _totalResouce.isHaveResource &&  _totalResouce.total[0] > UserDefaultHelper.shared.getTimstampResouceChanged(groupId: groupId, slot: 1){
                // if resouce changed
                let dispathGroup = DispatchGroup()
                dispathGroup.enter()
                self.getResouce(group: group, slot: 1, timeStamp: _totalResouce.total[0], completion: {
                    // --
                    dispathGroup.leave()
                })
                dispathGroup.notify(queue: DispatchQueue.main) {
                    completion()
//                    ProgressView.shared.hideProgressView()
                }
                
            } else {
                completion()
//                ProgressView.shared.hideProgressView()
            }
            
        }) { error in
            completion()
//            ProgressView.shared.hideProgressView()
        }
    }
    
    func getResouce(group: GroupEntity, slot: Int, timeStamp: UInt64, completion: @escaping CompletionClosure) {
        Provider.shared.resourceAPIService.getResource(groupId: group.id&, slot: slot, success: { resourceEntity in
            resourceEntity?.timeStamp = timeStamp
            self.handleResouce(group: group, slot: slot, resourceEntity: resourceEntity, completion: completion)
        }) { _ in
            completion()
//            ProgressView.shared.hideProgressView()
        }
    }
    
}
