//
//  ListRoomViewController.swift
//  DQHome
//
//  Created Ngoc Duong on 10/30/18.
//  Copyright © 2018 Engma. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

protocol ListGroupViewControllerDelegate: class {
    func itemGroupSelected(items: [Any], floor: Int, room: Int)
}

class ListGroupViewController: BaseViewController, ListGroupViewProtocol {
    
    var presenter: ListGroupPresenterProtocol?
    @IBOutlet weak var cvGroup: UICollectionView!
    
    weak var delegate: ListGroupViewControllerDelegate?
    
    var listGroup = [GroupEntity]() {
        didSet {
            cvGroup.reloadData()
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
       print(CognitoService.shared.token)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
         presenter?.viewDidLoad()
    }
    
    override func setUpViews() {
        super.setUpViews()
        configureCollection()
    }
}

// MARK: receive data
extension ListGroupViewController {
    func didGetTopGroup(groups: [GroupEntity]) {
        ProgressView.shared.hideProgressView()
        listGroup = groups
    }
}


extension ListGroupViewController: UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    func configureCollection() {
        cvGroup.dataSource = self
        cvGroup.delegate = self
        cvGroup.registerXibFile(GroupCell.self)
        cvGroup.register(UINib(nibName: "HeaderGroupCell", bundle: nil), forSupplementaryViewOfKind: UICollectionElementKindSectionHeader, withReuseIdentifier: "HeaderGroupCell")
        
        if let layout = cvGroup.collectionViewLayout as? UICollectionViewFlowLayout {
            layout.minimumLineSpacing = 2
            layout.minimumInteritemSpacing = 2
        }
    }
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return self.listGroup.count
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        let listGroupChildren = listGroup[section].children
        return listGroupChildren.count + 1
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let listGroupChildren = listGroup[indexPath.section].children
        
        if indexPath.item != listGroupChildren.count {
            let cell = cvGroup.dequeue(GroupCell.self, for: indexPath)
            cell.item = listGroupChildren[indexPath.item]
            cell.imgIcon.image = nil
            cell.lbName.isHidden = false
            cell.imgBackground.image = AppImage.imgDemoRoom
            return cell
        } else {
            let cell = cvGroup.dequeue(GroupCell.self, for: indexPath)
            cell.imgIcon.image = AppImage.imgAdd
            cell.imgBackground.image = nil
            cell.lbName.isHidden = true
            return cell
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if indexPath.item > listGroup[indexPath.section].children.count - 1 {
            return
        }
        
        delegate?.itemGroupSelected(items: listGroup, floor: indexPath.section, room: indexPath.item)
//        let room = listGroup[indexPath.section].children[indexPath.item]
        
//        if room.listRoomData.count > 0 {
//            delegate?.itemGroupSelected(items: listGroup, floor: indexPath.section, room: indexPath.item)
//        } else {
//            PopUpNotificationHelper.shared.showMessage(message: "Chưa thiết lập phòng này.")
//        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        let width = (cvGroup.frame.width - 6 ) / 4
        let height = width
        
        return CGSize(width: width, height: height)
    }
    
    
    /*********************************HEADER*************************************/
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        if kind == UICollectionElementKindSectionHeader {
            let header = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionElementKindSectionHeader, withReuseIdentifier: "HeaderGroupCell", for: indexPath) as! HeaderGroupCell
            header.group = self.listGroup[indexPath.section]
            
            return header
        }
        return UICollectionViewCell()
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        return CGSize(width: 120, height: 30)
    }
}
