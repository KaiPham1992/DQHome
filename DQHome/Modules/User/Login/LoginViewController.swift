//
//  LoginViewController.swift
//  DQHome
//
//  Created Ngoc Duong on 10/15/18.
//  Copyright © 2018 Engma. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import XMLMapper
import AWSCognitoIdentityProvider

class LoginViewController: BaseViewController, LoginViewProtocol {
    //---
    @IBOutlet weak var vVietName: AppRadioButton!
    @IBOutlet weak var vEngLish: AppRadioButton!
    @IBOutlet weak var vAdmin: AppRadioButton!
    @IBOutlet weak var vSavePassword: AppRadioButton!
    @IBOutlet weak var tfUsername: AppTextField!
    @IBOutlet weak var tfUsernameControl: AppTextField!
    @IBOutlet weak var tfPassword: AppTextField!
    @IBOutlet weak var btnLogin: AppButton!
    @IBOutlet weak var btnForgotPassword: UIButton!
    
    @IBOutlet weak var heightTfUserControl: NSLayoutConstraint!
    
    //---
    var presenter: LoginPresenterProtocol?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        NotificationCenter.default.removeObserver(self)
        NotificationCenter.default.addObserver(self, selector: #selector(loginAgain), name: Constants.LoginAgain, object: nil)
    }
    
    @objc func loginAgain() {
        btnLoginTapped()
    }
    
    override func setUpViews() {
        super.setUpViews()
        vVietName.setContentToLeft()
        vVietName.delegate = self
        vVietName.isChecked = true
        vEngLish.delegate = self
        vAdmin.delegate = self
        vEngLish.setContentToRight()
        vAdmin.imgCheck = AppImage.imgCheckBox
        vAdmin.imgUnCheck = AppImage.imgUnCheckBox
        vAdmin.isChecked = true
        
        //--
        tfUsername.setPlaceHolder(placeholder: AppString.Title.userNamePlaceHolder)
        tfUsernameControl.setPlaceHolder(placeholder: AppString.Title.userNameControlPlaceHolder)
        tfPassword.setPlaceHolder(placeholder: AppString.Title.password)
        tfPassword.isSecureTextEntry = true
        
        //--
        vVietName.setTitle(title: AppString.Title.vietNamese)
        vEngLish.setTitle(title: AppString.Title.english)
        vAdmin.setTitle(title: AppString.Title.admin)
        vSavePassword.setTitle(title: AppString.Title.savePassword)
        btnLogin.setTitleLanguage(title: AppString.Title.login)
        btnForgotPassword.setTitle(AppString.Title.forgotPassword.showLanguage, for: .normal)
        
        if LanguageHelper.currentAppleLanguage() == LanguageType.vietname.rawValue {
            setVietNamese()
        } else {
            setEnglish()
        }
        tfUsername.text = "dqiot"
        tfUsernameControl.text = "subuser"
        tfPassword.text = "dqiot123"
    }
    
    private func setVietNamese() {
        vVietName.isChecked = true
        vEngLish.isChecked = false
        LanguageHelper.setAppleLAnguageTo(lang: LanguageType.vietname)
    }
    
    private func setEnglish() {
        vVietName.isChecked = false
        vEngLish.isChecked = true
        LanguageHelper.setAppleLAnguageTo(lang: LanguageType.english)
    }
    
    @IBAction func btnLoginTapped() {
        //--

        
//        --
        var userName = self.tfUsername.text&
        let userNameControl = self.tfUsernameControl.text&
        let password = self.tfPassword.text&

        if validInput(userName: userName, userNameControl: userNameControl, password: password) {
            if !vAdmin.isChecked {
                userName = "\(userName).\(userNameControl)"
            }

            let queue = OperationQueue()
            ProgressView.shared.showProgress(with: AppString.Loading.login)
            queue.addOperation {
                self.presenter?.btnLoginTapped(passwordAuthenticationCompletion: CognitoService.shared.passwordAuthenticationCompletion, userName: userName, password: password)
            }
        }
    }
}

extension LoginViewController {
    func validInput(userName: String, userNameControl: String, password: String) -> Bool {
        if userName.isValidEmpty() {
            PopUpNotificationHelper.shared.showMessageTryAgain(message: AppString.Message.errorUserNameEmpty)
            return false
        }
        
        if userNameControl.isValidEmpty() {
            PopUpNotificationHelper.shared.showMessageTryAgain(message: AppString.Message.errorUserNameControlEmpty)
            return false
        }
        
        if password.isValidEmpty() {
            PopUpNotificationHelper.shared.showMessageTryAgain(message: AppString.Message.errorPasswordEmpty)
            return false
        }
        
        return true
    }
}

extension LoginViewController: AppRadioButtonDelegate {
    func changedSelected(sender: AppRadioButton, isSelected: Bool) {
        if sender != vAdmin {
            if sender == vVietName {
                setVietNamese()
            } else {
                setEnglish()
            }
            
            setUpViews()
        } else {
            heightTfUserControl.constant = isSelected == true ? 0: 35
            tfUsernameControl.isHidden = isSelected
        }
    }
}

extension LoginViewController: AWSCognitoIdentityPasswordAuthentication {
    func getDetails(_ authenticationInput: AWSCognitoIdentityPasswordAuthenticationInput, passwordAuthenticationCompletionSource: AWSTaskCompletionSource<AWSCognitoIdentityPasswordAuthenticationDetails>) {
//        self.passwordAuthenticationCompletion = passwordAuthenticationCompletionSource
        CognitoService.shared.passwordAuthenticationCompletion = passwordAuthenticationCompletionSource
    }
    
    func didCompleteStepWithError(_ error: Error?) {
        ProgressView.shared.hideProgressView()
        
        if let error = error as NSError? {
            guard let message = error.userInfo["__type"] as? String else { return }
            PopUpNotificationHelper.shared.showMessage(message: message)
        } else {
            print("LoginViewController: Login OK")
            presenter?.goToHome()
        }
    }
    
}
